<?php
/**
 * CreateOrderRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Klarna\Payments
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klarna Payments API V1
 *
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Klarna\Payments\Model;

use \ArrayAccess;
use \Klarna\ObjectSerializer;

/**
 * CreateOrderRequest Class Doc Comment
 *
 * @category Class
 * @package  Klarna\Payments
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateOrderRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'create_order_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'authorization_token' => 'string',
        'auto_capture' => 'bool',
        'billing_address' => '\Klarna\Payments\Model\Address',
        'custom_payment_method_ids' => 'string[]',
        'customer' => '\Klarna\Payments\Model\Customer',
        'locale' => 'string',
        'merchant_data' => 'string',
        'merchant_reference1' => 'string',
        'merchant_reference2' => 'string',
        'merchant_urls' => '\Klarna\Payments\Model\MerchantUrls',
        'order_amount' => 'int',
        'order_lines' => '\Klarna\Payments\Model\OrderLine[]',
        'order_tax_amount' => 'int',
        'payment_method_categories' => '\Klarna\Payments\Model\PaymentMethodCategory[]',
        'purchase_country' => 'string',
        'purchase_currency' => 'string',
        'shipping_address' => '\Klarna\Payments\Model\Address',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'authorization_token' => null,
        'auto_capture' => null,
        'billing_address' => null,
        'custom_payment_method_ids' => null,
        'customer' => null,
        'locale' => null,
        'merchant_data' => null,
        'merchant_reference1' => null,
        'merchant_reference2' => null,
        'merchant_urls' => null,
        'order_amount' => 'int64',
        'order_lines' => null,
        'order_tax_amount' => 'int64',
        'payment_method_categories' => null,
        'purchase_country' => null,
        'purchase_currency' => null,
        'shipping_address' => null,
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'authorization_token' => false,
		'auto_capture' => false,
		'billing_address' => false,
		'custom_payment_method_ids' => false,
		'customer' => false,
		'locale' => false,
		'merchant_data' => false,
		'merchant_reference1' => false,
		'merchant_reference2' => false,
		'merchant_urls' => false,
		'order_amount' => false,
		'order_lines' => false,
		'order_tax_amount' => false,
		'payment_method_categories' => false,
		'purchase_country' => false,
		'purchase_currency' => false,
		'shipping_address' => false,
		'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorization_token' => 'authorization_token',
        'auto_capture' => 'auto_capture',
        'billing_address' => 'billing_address',
        'custom_payment_method_ids' => 'custom_payment_method_ids',
        'customer' => 'customer',
        'locale' => 'locale',
        'merchant_data' => 'merchant_data',
        'merchant_reference1' => 'merchant_reference1',
        'merchant_reference2' => 'merchant_reference2',
        'merchant_urls' => 'merchant_urls',
        'order_amount' => 'order_amount',
        'order_lines' => 'order_lines',
        'order_tax_amount' => 'order_tax_amount',
        'payment_method_categories' => 'payment_method_categories',
        'purchase_country' => 'purchase_country',
        'purchase_currency' => 'purchase_currency',
        'shipping_address' => 'shipping_address',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorization_token' => 'setAuthorizationToken',
        'auto_capture' => 'setAutoCapture',
        'billing_address' => 'setBillingAddress',
        'custom_payment_method_ids' => 'setCustomPaymentMethodIds',
        'customer' => 'setCustomer',
        'locale' => 'setLocale',
        'merchant_data' => 'setMerchantData',
        'merchant_reference1' => 'setMerchantReference1',
        'merchant_reference2' => 'setMerchantReference2',
        'merchant_urls' => 'setMerchantUrls',
        'order_amount' => 'setOrderAmount',
        'order_lines' => 'setOrderLines',
        'order_tax_amount' => 'setOrderTaxAmount',
        'payment_method_categories' => 'setPaymentMethodCategories',
        'purchase_country' => 'setPurchaseCountry',
        'purchase_currency' => 'setPurchaseCurrency',
        'shipping_address' => 'setShippingAddress',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorization_token' => 'getAuthorizationToken',
        'auto_capture' => 'getAutoCapture',
        'billing_address' => 'getBillingAddress',
        'custom_payment_method_ids' => 'getCustomPaymentMethodIds',
        'customer' => 'getCustomer',
        'locale' => 'getLocale',
        'merchant_data' => 'getMerchantData',
        'merchant_reference1' => 'getMerchantReference1',
        'merchant_reference2' => 'getMerchantReference2',
        'merchant_urls' => 'getMerchantUrls',
        'order_amount' => 'getOrderAmount',
        'order_lines' => 'getOrderLines',
        'order_tax_amount' => 'getOrderTaxAmount',
        'payment_method_categories' => 'getPaymentMethodCategories',
        'purchase_country' => 'getPurchaseCountry',
        'purchase_currency' => 'getPurchaseCurrency',
        'shipping_address' => 'getShippingAddress',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_COMPLETE = 'complete';
    public const STATUS_INCOMPLETE = 'incomplete';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_COMPLETE,
            self::STATUS_INCOMPLETE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('authorization_token', $data ?? [], null);
        $this->setIfExists('auto_capture', $data ?? [], false);
        $this->setIfExists('billing_address', $data ?? [], null);
        $this->setIfExists('custom_payment_method_ids', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('merchant_data', $data ?? [], null);
        $this->setIfExists('merchant_reference1', $data ?? [], null);
        $this->setIfExists('merchant_reference2', $data ?? [], null);
        $this->setIfExists('merchant_urls', $data ?? [], null);
        $this->setIfExists('order_amount', $data ?? [], null);
        $this->setIfExists('order_lines', $data ?? [], null);
        $this->setIfExists('order_tax_amount', $data ?? [], null);
        $this->setIfExists('payment_method_categories', $data ?? [], null);
        $this->setIfExists('purchase_country', $data ?? [], null);
        $this->setIfExists('purchase_currency', $data ?? [], null);
        $this->setIfExists('shipping_address', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['locale']) && !preg_match("/^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$/", $this->container['locale'])) {
            $invalidProperties[] = "invalid value for 'locale', must be conform to the pattern /^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$/.";
        }

        if (!is_null($this->container['merchant_data']) && (mb_strlen($this->container['merchant_data']) > 6000)) {
            $invalidProperties[] = "invalid value for 'merchant_data', the character length must be smaller than or equal to 6000.";
        }

        if (!is_null($this->container['merchant_data']) && (mb_strlen($this->container['merchant_data']) < 0)) {
            $invalidProperties[] = "invalid value for 'merchant_data', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['merchant_reference1']) && (mb_strlen($this->container['merchant_reference1']) > 255)) {
            $invalidProperties[] = "invalid value for 'merchant_reference1', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['merchant_reference1']) && (mb_strlen($this->container['merchant_reference1']) < 0)) {
            $invalidProperties[] = "invalid value for 'merchant_reference1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['merchant_reference2']) && (mb_strlen($this->container['merchant_reference2']) > 255)) {
            $invalidProperties[] = "invalid value for 'merchant_reference2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['merchant_reference2']) && (mb_strlen($this->container['merchant_reference2']) < 0)) {
            $invalidProperties[] = "invalid value for 'merchant_reference2', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['order_amount'] === null) {
            $invalidProperties[] = "'order_amount' can't be null";
        }
        if (($this->container['order_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'order_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['order_lines'] === null) {
            $invalidProperties[] = "'order_lines' can't be null";
        }
        if ((count($this->container['order_lines']) > 1000)) {
            $invalidProperties[] = "invalid value for 'order_lines', number of items must be less than or equal to 1000.";
        }

        if ((count($this->container['order_lines']) < 1)) {
            $invalidProperties[] = "invalid value for 'order_lines', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['order_tax_amount']) && ($this->container['order_tax_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'order_tax_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['purchase_country'] === null) {
            $invalidProperties[] = "'purchase_country' can't be null";
        }
        if (!preg_match("/^[A-Za-z]{2,2}$/", $this->container['purchase_country'])) {
            $invalidProperties[] = "invalid value for 'purchase_country', must be conform to the pattern /^[A-Za-z]{2,2}$/.";
        }

        if ($this->container['purchase_currency'] === null) {
            $invalidProperties[] = "'purchase_currency' can't be null";
        }
        if (!preg_match("/^[A-Za-z]{3,3}$/", $this->container['purchase_currency'])) {
            $invalidProperties[] = "invalid value for 'purchase_currency', must be conform to the pattern /^[A-Za-z]{3,3}$/.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorization_token
     *
     * @return string|null
     */
    public function getAuthorizationToken()
    {
        return $this->container['authorization_token'];
    }

    /**
     * Sets authorization_token
     *
     * @param string|null $authorization_token Authorization token.
     *
     * @return self
     */
    public function setAuthorizationToken($authorization_token)
    {
        if (is_null($authorization_token)) {
            throw new \InvalidArgumentException('non-nullable authorization_token cannot be null');
        }
        $this->container['authorization_token'] = $authorization_token;

        return $this;
    }

    /**
     * Gets auto_capture
     *
     * @return bool|null
     */
    public function getAutoCapture()
    {
        return $this->container['auto_capture'];
    }

    /**
     * Sets auto_capture
     *
     * @param bool|null $auto_capture Allow merchant to trigger auto capturing.
     *
     * @return self
     */
    public function setAutoCapture($auto_capture)
    {
        if (is_null($auto_capture)) {
            throw new \InvalidArgumentException('non-nullable auto_capture cannot be null');
        }
        $this->container['auto_capture'] = $auto_capture;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \Klarna\Payments\Model\Address|null
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \Klarna\Payments\Model\Address|null $billing_address billing_address
     *
     * @return self
     */
    public function setBillingAddress($billing_address)
    {
        if (is_null($billing_address)) {
            throw new \InvalidArgumentException('non-nullable billing_address cannot be null');
        }
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets custom_payment_method_ids
     *
     * @return string[]|null
     */
    public function getCustomPaymentMethodIds()
    {
        return $this->container['custom_payment_method_ids'];
    }

    /**
     * Sets custom_payment_method_ids
     *
     * @param string[]|null $custom_payment_method_ids Promo codes - The array could be used to define which of the configured payment options within a payment category (pay_later, pay_over_time, etc.) should be shown for this purchase. Discuss with the delivery manager to know about the promo codes that will be configured for your account. The feature could also be used to provide promotional offers to specific customers (eg: 0% financing). Please be informed that the usage of this feature can have commercial implications.
     *
     * @return self
     */
    public function setCustomPaymentMethodIds($custom_payment_method_ids)
    {
        if (is_null($custom_payment_method_ids)) {
            throw new \InvalidArgumentException('non-nullable custom_payment_method_ids cannot be null');
        }
        $this->container['custom_payment_method_ids'] = $custom_payment_method_ids;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Klarna\Payments\Model\Customer|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Klarna\Payments\Model\Customer|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale Used to define the language and region of the customer. The locale follows the format of [RFC 1766](https://datatracker.ietf.org/doc/rfc1766/), meaning its value consists of language-country. Read more on **[Supported Locals and Currencies](https://docs.klarna.com/klarna-payments/in-depth-knowledge/puchase-countries-currencies-locales/)**.
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }

        if ((!preg_match("/^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$/", $locale))) {
            throw new \InvalidArgumentException("invalid value for \$locale when calling CreateOrderRequest., must conform to the pattern /^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$/.");
        }

        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets merchant_data
     *
     * @return string|null
     */
    public function getMerchantData()
    {
        return $this->container['merchant_data'];
    }

    /**
     * Sets merchant_data
     *
     * @param string|null $merchant_data Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters)
     *
     * @return self
     */
    public function setMerchantData($merchant_data)
    {
        if (is_null($merchant_data)) {
            throw new \InvalidArgumentException('non-nullable merchant_data cannot be null');
        }
        if ((mb_strlen($merchant_data) > 6000)) {
            throw new \InvalidArgumentException('invalid length for $merchant_data when calling CreateOrderRequest., must be smaller than or equal to 6000.');
        }
        if ((mb_strlen($merchant_data) < 0)) {
            throw new \InvalidArgumentException('invalid length for $merchant_data when calling CreateOrderRequest., must be bigger than or equal to 0.');
        }

        $this->container['merchant_data'] = $merchant_data;

        return $this;
    }

    /**
     * Gets merchant_reference1
     *
     * @return string|null
     */
    public function getMerchantReference1()
    {
        return $this->container['merchant_reference1'];
    }

    /**
     * Sets merchant_reference1
     *
     * @param string|null $merchant_reference1 Used for storing merchant's internal order number or other reference.
     *
     * @return self
     */
    public function setMerchantReference1($merchant_reference1)
    {
        if (is_null($merchant_reference1)) {
            throw new \InvalidArgumentException('non-nullable merchant_reference1 cannot be null');
        }
        if ((mb_strlen($merchant_reference1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $merchant_reference1 when calling CreateOrderRequest., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($merchant_reference1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $merchant_reference1 when calling CreateOrderRequest., must be bigger than or equal to 0.');
        }

        $this->container['merchant_reference1'] = $merchant_reference1;

        return $this;
    }

    /**
     * Gets merchant_reference2
     *
     * @return string|null
     */
    public function getMerchantReference2()
    {
        return $this->container['merchant_reference2'];
    }

    /**
     * Sets merchant_reference2
     *
     * @param string|null $merchant_reference2 Used for storing merchant's internal order number or other reference. The value is available in the settlement files. (max 255 characters).
     *
     * @return self
     */
    public function setMerchantReference2($merchant_reference2)
    {
        if (is_null($merchant_reference2)) {
            throw new \InvalidArgumentException('non-nullable merchant_reference2 cannot be null');
        }
        if ((mb_strlen($merchant_reference2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $merchant_reference2 when calling CreateOrderRequest., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($merchant_reference2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $merchant_reference2 when calling CreateOrderRequest., must be bigger than or equal to 0.');
        }

        $this->container['merchant_reference2'] = $merchant_reference2;

        return $this;
    }

    /**
     * Gets merchant_urls
     *
     * @return \Klarna\Payments\Model\MerchantUrls|null
     */
    public function getMerchantUrls()
    {
        return $this->container['merchant_urls'];
    }

    /**
     * Sets merchant_urls
     *
     * @param \Klarna\Payments\Model\MerchantUrls|null $merchant_urls merchant_urls
     *
     * @return self
     */
    public function setMerchantUrls($merchant_urls)
    {
        if (is_null($merchant_urls)) {
            throw new \InvalidArgumentException('non-nullable merchant_urls cannot be null');
        }
        $this->container['merchant_urls'] = $merchant_urls;

        return $this;
    }

    /**
     * Gets order_amount
     *
     * @return int
     */
    public function getOrderAmount()
    {
        return $this->container['order_amount'];
    }

    /**
     * Sets order_amount
     *
     * @param int $order_amount Total amount of the order including tax and any available discounts. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
     *
     * @return self
     */
    public function setOrderAmount($order_amount)
    {
        if (is_null($order_amount)) {
            throw new \InvalidArgumentException('non-nullable order_amount cannot be null');
        }

        if (($order_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $order_amount when calling CreateOrderRequest., must be bigger than or equal to 0.');
        }

        $this->container['order_amount'] = $order_amount;

        return $this;
    }

    /**
     * Gets order_lines
     *
     * @return \Klarna\Payments\Model\OrderLine[]
     */
    public function getOrderLines()
    {
        return $this->container['order_lines'];
    }

    /**
     * Sets order_lines
     *
     * @param \Klarna\Payments\Model\OrderLine[] $order_lines The array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.
     *
     * @return self
     */
    public function setOrderLines($order_lines)
    {
        if (is_null($order_lines)) {
            throw new \InvalidArgumentException('non-nullable order_lines cannot be null');
        }

        if ((count($order_lines) > 1000)) {
            throw new \InvalidArgumentException('invalid value for $order_lines when calling CreateOrderRequest., number of items must be less than or equal to 1000.');
        }
        if ((count($order_lines) < 1)) {
            throw new \InvalidArgumentException('invalid length for $order_lines when calling CreateOrderRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['order_lines'] = $order_lines;

        return $this;
    }

    /**
     * Gets order_tax_amount
     *
     * @return int|null
     */
    public function getOrderTaxAmount()
    {
        return $this->container['order_tax_amount'];
    }

    /**
     * Sets order_tax_amount
     *
     * @param int|null $order_tax_amount Total tax amount of the order. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
     *
     * @return self
     */
    public function setOrderTaxAmount($order_tax_amount)
    {
        if (is_null($order_tax_amount)) {
            throw new \InvalidArgumentException('non-nullable order_tax_amount cannot be null');
        }

        if (($order_tax_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $order_tax_amount when calling CreateOrderRequest., must be bigger than or equal to 0.');
        }

        $this->container['order_tax_amount'] = $order_tax_amount;

        return $this;
    }

    /**
     * Gets payment_method_categories
     *
     * @return \Klarna\Payments\Model\PaymentMethodCategory[]|null
     */
    public function getPaymentMethodCategories()
    {
        return $this->container['payment_method_categories'];
    }

    /**
     * Sets payment_method_categories
     *
     * @param \Klarna\Payments\Model\PaymentMethodCategory[]|null $payment_method_categories Available payment method categories
     *
     * @return self
     */
    public function setPaymentMethodCategories($payment_method_categories)
    {
        if (is_null($payment_method_categories)) {
            throw new \InvalidArgumentException('non-nullable payment_method_categories cannot be null');
        }


        $this->container['payment_method_categories'] = $payment_method_categories;

        return $this;
    }

    /**
     * Gets purchase_country
     *
     * @return string
     */
    public function getPurchaseCountry()
    {
        return $this->container['purchase_country'];
    }

    /**
     * Sets purchase_country
     *
     * @param string $purchase_country The purchase country of the customer. The billing country always overrides purchase country if the values are different. Formatted according to ISO 3166 alpha-2 standard, e.g. GB, SE, DE, US, etc.
     *
     * @return self
     */
    public function setPurchaseCountry($purchase_country)
    {
        if (is_null($purchase_country)) {
            throw new \InvalidArgumentException('non-nullable purchase_country cannot be null');
        }

        if ((!preg_match("/^[A-Za-z]{2,2}$/", $purchase_country))) {
            throw new \InvalidArgumentException("invalid value for \$purchase_country when calling CreateOrderRequest., must conform to the pattern /^[A-Za-z]{2,2}$/.");
        }

        $this->container['purchase_country'] = $purchase_country;

        return $this;
    }

    /**
     * Gets purchase_currency
     *
     * @return string
     */
    public function getPurchaseCurrency()
    {
        return $this->container['purchase_currency'];
    }

    /**
     * Sets purchase_currency
     *
     * @param string $purchase_currency The purchase currency of the order. Formatted according to ISO 4217 standard, e.g. USD, EUR, SEK, GBP, etc.
     *
     * @return self
     */
    public function setPurchaseCurrency($purchase_currency)
    {
        if (is_null($purchase_currency)) {
            throw new \InvalidArgumentException('non-nullable purchase_currency cannot be null');
        }

        if ((!preg_match("/^[A-Za-z]{3,3}$/", $purchase_currency))) {
            throw new \InvalidArgumentException("invalid value for \$purchase_currency when calling CreateOrderRequest., must conform to the pattern /^[A-Za-z]{3,3}$/.");
        }

        $this->container['purchase_currency'] = $purchase_currency;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return \Klarna\Payments\Model\Address|null
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param \Klarna\Payments\Model\Address|null $shipping_address shipping_address
     *
     * @return self
     */
    public function setShippingAddress($shipping_address)
    {
        if (is_null($shipping_address)) {
            throw new \InvalidArgumentException('non-nullable shipping_address cannot be null');
        }
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The current status of the session. Possible values: 'complete', 'incomplete' where 'complete' is set when the order has been placed.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


