<?php
/**
 * OrderLine
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Klarna\Payments
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klarna Payments API V1
 *
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Klarna\Payments\Model;

use \ArrayAccess;
use \Klarna\ObjectSerializer;

/**
 * OrderLine Class Doc Comment
 *
 * @category Class
 * @package  Klarna\Payments
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderLine implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'order_line';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'image_url' => 'string',
        'merchant_data' => 'string',
        'name' => 'string',
        'product_identifiers' => '\Klarna\Payments\Model\ProductIdentifiers',
        'product_url' => 'string',
        'quantity' => 'int',
        'quantity_unit' => 'string',
        'reference' => 'string',
        'tax_rate' => 'int',
        'total_amount' => 'int',
        'total_discount_amount' => 'int',
        'total_tax_amount' => 'int',
        'type' => 'string',
        'unit_price' => 'int',
        'subscription' => '\Klarna\Payments\Model\Subscription'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'image_url' => null,
        'merchant_data' => null,
        'name' => null,
        'product_identifiers' => null,
        'product_url' => null,
        'quantity' => 'int64',
        'quantity_unit' => null,
        'reference' => null,
        'tax_rate' => 'int64',
        'total_amount' => 'int64',
        'total_discount_amount' => 'int64',
        'total_tax_amount' => 'int64',
        'type' => null,
        'unit_price' => 'int64',
        'subscription' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'image_url' => false,
		'merchant_data' => false,
		'name' => false,
		'product_identifiers' => false,
		'product_url' => false,
		'quantity' => false,
		'quantity_unit' => false,
		'reference' => false,
		'tax_rate' => false,
		'total_amount' => false,
		'total_discount_amount' => false,
		'total_tax_amount' => false,
		'type' => false,
		'unit_price' => false,
		'subscription' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'image_url' => 'image_url',
        'merchant_data' => 'merchant_data',
        'name' => 'name',
        'product_identifiers' => 'product_identifiers',
        'product_url' => 'product_url',
        'quantity' => 'quantity',
        'quantity_unit' => 'quantity_unit',
        'reference' => 'reference',
        'tax_rate' => 'tax_rate',
        'total_amount' => 'total_amount',
        'total_discount_amount' => 'total_discount_amount',
        'total_tax_amount' => 'total_tax_amount',
        'type' => 'type',
        'unit_price' => 'unit_price',
        'subscription' => 'subscription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'image_url' => 'setImageUrl',
        'merchant_data' => 'setMerchantData',
        'name' => 'setName',
        'product_identifiers' => 'setProductIdentifiers',
        'product_url' => 'setProductUrl',
        'quantity' => 'setQuantity',
        'quantity_unit' => 'setQuantityUnit',
        'reference' => 'setReference',
        'tax_rate' => 'setTaxRate',
        'total_amount' => 'setTotalAmount',
        'total_discount_amount' => 'setTotalDiscountAmount',
        'total_tax_amount' => 'setTotalTaxAmount',
        'type' => 'setType',
        'unit_price' => 'setUnitPrice',
        'subscription' => 'setSubscription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'image_url' => 'getImageUrl',
        'merchant_data' => 'getMerchantData',
        'name' => 'getName',
        'product_identifiers' => 'getProductIdentifiers',
        'product_url' => 'getProductUrl',
        'quantity' => 'getQuantity',
        'quantity_unit' => 'getQuantityUnit',
        'reference' => 'getReference',
        'tax_rate' => 'getTaxRate',
        'total_amount' => 'getTotalAmount',
        'total_discount_amount' => 'getTotalDiscountAmount',
        'total_tax_amount' => 'getTotalTaxAmount',
        'type' => 'getType',
        'unit_price' => 'getUnitPrice',
        'subscription' => 'getSubscription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('image_url', $data ?? [], null);
        $this->setIfExists('merchant_data', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('product_identifiers', $data ?? [], null);
        $this->setIfExists('product_url', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('quantity_unit', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('tax_rate', $data ?? [], null);
        $this->setIfExists('total_amount', $data ?? [], null);
        $this->setIfExists('total_discount_amount', $data ?? [], null);
        $this->setIfExists('total_tax_amount', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('subscription', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['image_url']) && (mb_strlen($this->container['image_url']) > 1024)) {
            $invalidProperties[] = "invalid value for 'image_url', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['image_url']) && (mb_strlen($this->container['image_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'image_url', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['merchant_data']) && (mb_strlen($this->container['merchant_data']) > 1024)) {
            $invalidProperties[] = "invalid value for 'merchant_data', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['merchant_data']) && (mb_strlen($this->container['merchant_data']) < 0)) {
            $invalidProperties[] = "invalid value for 'merchant_data', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['product_url']) && (mb_strlen($this->container['product_url']) > 1024)) {
            $invalidProperties[] = "invalid value for 'product_url', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['product_url']) && (mb_strlen($this->container['product_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'product_url', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if (($this->container['quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['quantity_unit']) && (mb_strlen($this->container['quantity_unit']) > 8)) {
            $invalidProperties[] = "invalid value for 'quantity_unit', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['quantity_unit']) && (mb_strlen($this->container['quantity_unit']) < 1)) {
            $invalidProperties[] = "invalid value for 'quantity_unit', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) > 256)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['tax_rate']) && ($this->container['tax_rate'] > 10000)) {
            $invalidProperties[] = "invalid value for 'tax_rate', must be smaller than or equal to 10000.";
        }

        if (!is_null($this->container['tax_rate']) && ($this->container['tax_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'tax_rate', must be bigger than or equal to 0.";
        }

        if ($this->container['total_amount'] === null) {
            $invalidProperties[] = "'total_amount' can't be null";
        }
        if (($this->container['total_amount'] > 100000000)) {
            $invalidProperties[] = "invalid value for 'total_amount', must be smaller than or equal to 100000000.";
        }

        if (!is_null($this->container['total_discount_amount']) && ($this->container['total_discount_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_discount_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['unit_price'] === null) {
            $invalidProperties[] = "'unit_price' can't be null";
        }
        if (($this->container['unit_price'] > 100000000)) {
            $invalidProperties[] = "invalid value for 'unit_price', must be smaller than or equal to 100000000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets image_url
     *
     * @return string|null
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string|null $image_url URL to an image that can be later embedded in communications between Klarna and the customer. (max 1024 characters).  A minimum of 250x250 px resolution is recommended for the image to look good in the Klarna app, and below 50x50 px won't even show. We recommend using a good sized image (650x650 px or more), however the file size must not exceed 12MB.
     *
     * @return self
     */
    public function setImageUrl($image_url)
    {
        if (is_null($image_url)) {
            throw new \InvalidArgumentException('non-nullable image_url cannot be null');
        }
        if ((mb_strlen($image_url) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $image_url when calling OrderLine., must be smaller than or equal to 1024.');
        }
        if ((mb_strlen($image_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $image_url when calling OrderLine., must be bigger than or equal to 0.');
        }

        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets merchant_data
     *
     * @return string|null
     */
    public function getMerchantData()
    {
        return $this->container['merchant_data'];
    }

    /**
     * Sets merchant_data
     *
     * @param string|null $merchant_data Used for storing merchant's internal order number or other reference. Pass through field. (max 1024 characters)
     *
     * @return self
     */
    public function setMerchantData($merchant_data)
    {
        if (is_null($merchant_data)) {
            throw new \InvalidArgumentException('non-nullable merchant_data cannot be null');
        }
        if ((mb_strlen($merchant_data) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $merchant_data when calling OrderLine., must be smaller than or equal to 1024.');
        }
        if ((mb_strlen($merchant_data) < 0)) {
            throw new \InvalidArgumentException('invalid length for $merchant_data when calling OrderLine., must be bigger than or equal to 0.');
        }

        $this->container['merchant_data'] = $merchant_data;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Descriptive name of the order line item.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling OrderLine., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling OrderLine., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets product_identifiers
     *
     * @return \Klarna\Payments\Model\ProductIdentifiers|null
     */
    public function getProductIdentifiers()
    {
        return $this->container['product_identifiers'];
    }

    /**
     * Sets product_identifiers
     *
     * @param \Klarna\Payments\Model\ProductIdentifiers|null $product_identifiers product_identifiers
     *
     * @return self
     */
    public function setProductIdentifiers($product_identifiers)
    {
        if (is_null($product_identifiers)) {
            throw new \InvalidArgumentException('non-nullable product_identifiers cannot be null');
        }
        $this->container['product_identifiers'] = $product_identifiers;

        return $this;
    }

    /**
     * Gets product_url
     *
     * @return string|null
     */
    public function getProductUrl()
    {
        return $this->container['product_url'];
    }

    /**
     * Sets product_url
     *
     * @param string|null $product_url URL to the product in the merchant’s webshop that can be later used in communications between Klarna and the customer. (max 1024 characters)
     *
     * @return self
     */
    public function setProductUrl($product_url)
    {
        if (is_null($product_url)) {
            throw new \InvalidArgumentException('non-nullable product_url cannot be null');
        }
        if ((mb_strlen($product_url) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $product_url when calling OrderLine., must be smaller than or equal to 1024.');
        }
        if ((mb_strlen($product_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $product_url when calling OrderLine., must be bigger than or equal to 0.');
        }

        $this->container['product_url'] = $product_url;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Quantity of the order line item. Must be a non-negative number.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        if (($quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling OrderLine., must be bigger than or equal to 0.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quantity_unit
     *
     * @return string|null
     */
    public function getQuantityUnit()
    {
        return $this->container['quantity_unit'];
    }

    /**
     * Sets quantity_unit
     *
     * @param string|null $quantity_unit Unit used to describe the quantity, e.g. kg, pcs, etc. If defined the value has to be 1-8 characters.
     *
     * @return self
     */
    public function setQuantityUnit($quantity_unit)
    {
        if (is_null($quantity_unit)) {
            throw new \InvalidArgumentException('non-nullable quantity_unit cannot be null');
        }
        if ((mb_strlen($quantity_unit) > 8)) {
            throw new \InvalidArgumentException('invalid length for $quantity_unit when calling OrderLine., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($quantity_unit) < 1)) {
            throw new \InvalidArgumentException('invalid length for $quantity_unit when calling OrderLine., must be bigger than or equal to 1.');
        }

        $this->container['quantity_unit'] = $quantity_unit;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Client facing article number, SKU or similar. Max length is 256 characters.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        if ((mb_strlen($reference) > 256)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling OrderLine., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling OrderLine., must be bigger than or equal to 0.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return int|null
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param int|null $tax_rate Tax rate of the order line. Non-negative value. The percentage value is represented with two implicit decimals. I.e 2000 = 20%.
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {
        if (is_null($tax_rate)) {
            throw new \InvalidArgumentException('non-nullable tax_rate cannot be null');
        }

        if (($tax_rate > 10000)) {
            throw new \InvalidArgumentException('invalid value for $tax_rate when calling OrderLine., must be smaller than or equal to 10000.');
        }
        if (($tax_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $tax_rate when calling OrderLine., must be bigger than or equal to 0.');
        }

        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return int
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param int $total_amount Total amount of the order line. Must be defined as minor units. Includes tax and discount. Eg: 2000=20 euros Value = (quantity x unit_price) - total_discount_amount.  (max value: 100000000)
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        if (is_null($total_amount)) {
            throw new \InvalidArgumentException('non-nullable total_amount cannot be null');
        }

        if (($total_amount > 100000000)) {
            throw new \InvalidArgumentException('invalid value for $total_amount when calling OrderLine., must be smaller than or equal to 100000000.');
        }

        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets total_discount_amount
     *
     * @return int|null
     */
    public function getTotalDiscountAmount()
    {
        return $this->container['total_discount_amount'];
    }

    /**
     * Sets total_discount_amount
     *
     * @param int|null $total_discount_amount Non-negative minor units. Includes tax. Eg: 500=5 euros
     *
     * @return self
     */
    public function setTotalDiscountAmount($total_discount_amount)
    {
        if (is_null($total_discount_amount)) {
            throw new \InvalidArgumentException('non-nullable total_discount_amount cannot be null');
        }

        if (($total_discount_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_discount_amount when calling OrderLine., must be bigger than or equal to 0.');
        }

        $this->container['total_discount_amount'] = $total_discount_amount;

        return $this;
    }

    /**
     * Gets total_tax_amount
     *
     * @return int|null
     */
    public function getTotalTaxAmount()
    {
        return $this->container['total_tax_amount'];
    }

    /**
     * Sets total_tax_amount
     *
     * @param int|null $total_tax_amount Total tax amount of the order line. Must be within ±1 of total_amount - total_amount 10000 / (10000 + tax_rate). Negative when type is discount.
     *
     * @return self
     */
    public function setTotalTaxAmount($total_tax_amount)
    {
        if (is_null($total_tax_amount)) {
            throw new \InvalidArgumentException('non-nullable total_tax_amount cannot be null');
        }
        $this->container['total_tax_amount'] = $total_tax_amount;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of the order line item. The possible values are:  physical discount shipping_fee sales_tax digital gift_card store_credit surcharge
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return int
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param int $unit_price Price for a single unit of the order line. Must be defined as minor units. Includes tax, excludes discount. (max value: 100000000)
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        if (is_null($unit_price)) {
            throw new \InvalidArgumentException('non-nullable unit_price cannot be null');
        }

        if (($unit_price > 100000000)) {
            throw new \InvalidArgumentException('invalid value for $unit_price when calling OrderLine., must be smaller than or equal to 100000000.');
        }

        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return \Klarna\Payments\Model\Subscription|null
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param \Klarna\Payments\Model\Subscription|null $subscription subscription
     *
     * @return self
     */
    public function setSubscription($subscription)
    {
        if (is_null($subscription)) {
            throw new \InvalidArgumentException('non-nullable subscription cannot be null');
        }
        $this->container['subscription'] = $subscription;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


